/** 
 * Project Name:SkynetEye
 * File Name:ShiroConfig.java 
 * Package Name:com.skynet.system.config 
 * History
 * Seq   Date        Developer     email                   
 *  ---------------------------------------------------------------------------
 *  1    2018年8月22日    zeroLi       343077359@qq.com
 *
 *
 * Fcuntion Description :shiro配置类
 * 
 * ApacheShiro核心通过Filter来实现权限控制和拦截 , 就好像SpringMVC通过DispachServlet来主控制请求分发一样
 * 既然是使用Filter , 即是通过URL规则来进行过滤和权限校验 , 所以我们需要定义一系列关于URL的规则和访问权限 
 * 参考：https://www.codercto.com/a/14259.html
 *  ---------------------------------------------------------------------------
 * Copyright (c) 2018, SkynetEye All Rights Reserved. 
 * 
 */
package com.skynet.system.config;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;

import org.apache.shiro.authc.credential.CredentialsMatcher;
import org.apache.shiro.cache.ehcache.EhCacheManager;
import org.apache.shiro.session.SessionListener;
import org.apache.shiro.session.mgt.SessionManager;
import org.apache.shiro.session.mgt.eis.MemorySessionDAO;
import org.apache.shiro.session.mgt.eis.SessionDAO;
import org.apache.shiro.spring.LifecycleBeanPostProcessor;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;
import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;

@Configuration
public class ShiroConfig {

//    @Value("${spring.redis.host}")
//    private String host;
//    @Value("${spring.redis.password}")
//    private String password;
//    @Value("${spring.redis.port}")
//    private int port;
//    @Value("${spring.redis.timeout}")
//    private int timeout;
//
//    @Value("${spring.cache.type}")
//    private String cacheType ;

	@Value("${server.servlet.session.timeout}")
	private int tomcatTimeout;

	/**
	 * 管理shiro的生命周期
	 * 
	 * @return
	 */
	@Bean
//	@Bean(name = "lifecycleBeanPostProcessor") 
	public static LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {
		return new LifecycleBeanPostProcessor();
	}

	/**
	 * DefaultAdvisorAutoProxyCreator , Spring的一个bean , 由Advisor决定对哪些类的方法进行AOP代理
	 * 
	 * @return
	 */
	@Bean
	@ConditionalOnMissingBean
	public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {
		DefaultAdvisorAutoProxyCreator defaultAap = new DefaultAdvisorAutoProxyCreator();
		defaultAap.setProxyTargetClass(true);
		return defaultAap;
	}

	/**
	 * ShiroFilterFactoryBean : 为了生成ShiroFilter , 处理拦截资源文件问题 . 它主要保持了三项数据 ,
	 * securityManager , filters , filterChainDefinitionManager . 注意 :
	 * 单独一个ShiroFilterFactoryBean配置是或报错的 ,
	 * 因为在初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager
	 * 
	 * @return
	 */
	@Bean
	public ShiroFilterFactoryBean shiroFilterFactoryBean() {
		ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
		shiroFilterFactoryBean.setSecurityManager(securityManager());
		// 不设置默认找web工程根目录下的login.jsp页面
		shiroFilterFactoryBean.setLoginUrl("/login");
		// 登录成功之后要跳转的连接
		shiroFilterFactoryBean.setSuccessUrl("/index");
		// 未授权跳转页面
		shiroFilterFactoryBean.setUnauthorizedUrl("/403");
		Map<String, String> filterChainDefinitionMap = new LinkedHashMap<>();
		// 配置不需要权限访问的部分url
		filterChainDefinitionMap.put("/login", "anon");
		// 静态资源不要求权限 , 若有其他目录下文件(如js,img等)也依此设置
		filterChainDefinitionMap.put("/css/**", "anon");
		filterChainDefinitionMap.put("/js/**", "anon");
		filterChainDefinitionMap.put("/fonts/**", "anon");
		filterChainDefinitionMap.put("/img/**", "anon");
		filterChainDefinitionMap.put("/docs/**", "anon");
		filterChainDefinitionMap.put("/druid/**", "anon");
		filterChainDefinitionMap.put("/upload/**", "anon");
		filterChainDefinitionMap.put("/files/**", "anon");
		filterChainDefinitionMap.put("/logout", "logout");
		filterChainDefinitionMap.put("/", "anon");
		filterChainDefinitionMap.put("/blog", "anon");
		filterChainDefinitionMap.put("/blog/open/**", "anon");
		// 需要登录访问的资源 , 一般将/**放在最下边
		filterChainDefinitionMap.put("/**", "authc");
//		// 自定义拦截器 , 多个filter的设置
//		Map<String, Filter> filters = new LinkedHashMap<>();
//		LogoutFilter logoutFilter = new LogoutFilter();// 限制同一帐号同时在线的个数。或单点登录等
//		logoutFilter.setRedirectUrl("/login");
//		filters.put("logout", null);
//		shiroFilterFactoryBean.setFilters(filters);
		shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
		return shiroFilterFactoryBean;
	}

	@Bean
	SessionDAO sessionDAO() {
		return new MemorySessionDAO();
	}

	/**
	 * Session manager
	 * 
	 * @return
	 */
	@Bean
	public SessionManager sessionManager() {
		DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();
		Collection<SessionListener> listeners = new ArrayList<>();
		listeners.add(new BDSessionListener());
		sessionManager.setSessionListeners(listeners);
		sessionManager.setSessionDAO(sessionDAO());
		return sessionManager;
	}

	/**
	 * SecurityManager : 核心安全事务管理器 , 权限管理 这个类组合了登陆 , 登出 , 权限 , session的处理 . 是个比较重要的类
	 * 
	 * @return
	 */
	@Bean(name = "securityManager")
	public DefaultWebSecurityManager securityManager() {
		DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
		// 设置realm
		securityManager.setRealm(shiroRealm());
		// 用户授权/认证信息Cache, 采用EhCache 缓存
		securityManager.setCacheManager(ehCacheManager());
		// 自定义session管理 使用redis
		securityManager.setSessionManager(sessionManager());
		// 注入记住我管理器;
		securityManager.setRememberMeManager(rememberMeManager());
		return securityManager;
	}

	/**
	 * ShiroRealm , 这是个自定义的认证类 , 继承自AuthorizingRealm , 负责用户的认证和权限的处理 ,
	 * 可以参考JdbcRealm的实现 . CredentialsMatcher 是自定义验证规则
	 * 
	 * @param matcher
	 * @return
	 */
	@Bean
	@DependsOn("lifecycleBeanPostProcessor")
	public ShiroRealm shiroRealm(CredentialsMatcher matcher) {
		ShiroRealm realm = new ShiroRealm();
		// 密码校验实现
		realm.setCredentialsMatcher(matcher);
		return realm;
	}

	/**
	 * EhCacheManager , 缓存管理 用户登陆成功后 , 把用户信息和权限信息缓存起来 , 然后每次用户请求时 , 放入用户的session中 ,
	 * 如果不设置这个bean , 每个请求都会查询一次数据库 .
	 */
	@Bean
	@DependsOn("lifecycleBeanPostProcessor")
	public EhCacheManager ehCacheManager() {
		EhCacheManager em = new EhCacheManager();
		// 配置文件路径
		em.setCacheManagerConfigFile("classpath:config/ehcache.xml");
		return em;
	}

}
