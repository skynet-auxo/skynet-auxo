/** 
 * Project Name:SkynetEye
 * File Name:UserServiceImpl.java 
 * Package Name:com.skynet.system.service.imp 
 * History
 * Seq   Date        Developer      Description                        
 *  ---------------------------------------------------------------------------
 *  1    2018年8月20日    zeroLi        Create
 *
 *  ---------------------------------------------------------------------------
 * Copyright (c) 2018, SkynetEye All Rights Reserved. 
 * 
 */ 
package com.skynet.system.service.imp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import org.apache.commons.lang3.ArrayUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.skynet.common.bean.Tree;
import com.skynet.common.utils.MD5Utils;
import com.skynet.system.bean.Esecuserol;
import com.skynet.system.bean.Esecusrdef;
import com.skynet.system.bean.subtype.EsecusrdefC;
import com.skynet.system.dao.UserDao;
import com.skynet.system.dao.UserRoleDao;
import com.skynet.system.service.UserService;

//@CacheConfig(cacheNames = "user")
@Transactional
@Service
public class UserServiceImpl implements UserService {
	
    @Autowired
    private UserDao userMapper;
    @Autowired
    private UserRoleDao userRoleMapper;
    @Autowired
    private DeptDao deptMapper;
    @Autowired
    private FileService sysFileService;
    @Autowired
    private BootdoConfig bootdoConfig;
    
    private static final Logger logger = LoggerFactory.getLogger(UserService.class);

	@Override
	public Esecusrdef get(Long id) {
        List<Long> roleIds = userRoleMapper.listRoleId(id);
        Esecusrdef user = userMapper.get(id);
        user.setDeptName(deptMapper.get(user.getDeptId()).getName());
        user.setRoleIds(roleIds);
        return user;
	}

	@Override
	public List<Esecusrdef> list(Map<String, Object> map) {
        return userMapper.list(map);
	}

	@Override
	public int count(Map<String, Object> map) {
        return userMapper.count(map);
	}


	@Override
	public int create(Esecusrdef user) {
        int count = userMapper.save(user);
        Long userId = user.getUserId();
        List<Long> roles = user.getRoleIds();
        userRoleMapper.removeByUserId(userId);
        List<Esecuserol> list = new ArrayList<>();
        for (Long roleId : roles) {
        	Esecuserol esecuserol = new Esecuserol();
        	esecuserol.setUserId(userId);
        	esecuserol.setRoleId(roleId);
            list.add(esecuserol);
        }
        if (list.size() > 0) {
            userRoleMapper.batchSave(list);
        }
        return count;
	}


	@Override
	public int update(Esecusrdef user) {
        int r = userMapper.update(user);
        Long userId = user.getUserId();
        List<Long> roles = user.getRoleIds();
        userRoleMapper.removeByUserId(userId);
        List<Esecuserol> list = new ArrayList<>();
        for (Long roleId : roles) {
        	Esecuserol esecuserol = new Esecuserol();
        	esecuserol.setUserId(userId);
        	esecuserol.setRoleId(roleId);
            list.add(esecuserol);
        }
        if (list.size() > 0) {
            userRoleMapper.batchSave(list);
        }
        return r;
	}


	@Override
	public int delete(Long userId) {
        userRoleMapper.removeByUserId(userId);
        return userMapper.delete(userId);
	}


	@Override
	public int batchDelete(Long[] userIds) {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public boolean exit(Map<String, Object> params) {
        boolean exit;
        exit = userMapper.list(params).size() > 0;
        return exit;
	}


	@Override
	public Set<String> listRoles(Long userId) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public int resetPwd(EsecusrdefC userC, Esecusrdef user) throws Exception {
        if (Objects.equals(userC.getEsecusrdef().getUserId(), user.getUserId())) {
            if (Objects.equals(MD5Utils.encrypt(user.getUserName(), userC.getPwdOld()), user.getPassWord())) {
            	user.setPassWord(MD5Utils.encrypt(user.getUserName(), userC.getPwdNew()));
                return userMapper.update(user);
            } else {
                throw new Exception("Input the password is wrong");
            }
        } else {
            throw new Exception("You only can modify the account you login");
        }
	}


	@Override
	public int adminResetPwd(EsecusrdefC userC) throws Exception {
		Esecusrdef esecusrdef = get(userC.getEsecusrdef().getUserId());
        if ("admin".equals(esecusrdef.getUserName())) {
            throw new Exception("Super administrator account does not allow direct reset!");
        }
        esecusrdef.setPassWord(MD5Utils.encrypt(esecusrdef.getUserName(), userC.getPwdNew()));
        return userMapper.update(esecusrdef);
	}


	@Override
	public Tree<DeptDO> getTree() {
        List<Tree<DeptDO>> trees = new ArrayList<Tree<DeptDO>>();
        List<DeptDO> depts = deptMapper.list(new HashMap<String, Object>(16));
        Long[] pDepts = deptMapper.listParentDept();
        Long[] uDepts = userMapper.listAllDept();
        Long[] allDepts = (Long[]) ArrayUtils.addAll(pDepts, uDepts);
        for (DeptDO dept : depts) {
            if (!ArrayUtils.contains(allDepts, dept.getDeptId())) {
                continue;
            }
            Tree<DeptDO> tree = new Tree<DeptDO>();
            tree.setId(dept.getDeptId().toString());
            tree.setParentId(dept.getParentId().toString());
            tree.setText(dept.getName());
            Map<String, Object> state = new HashMap<>(16);
            state.put("opened", true);
            state.put("mType", "dept");
            tree.setState(state);
            trees.add(tree);
        }
        List<Esecusrdef> users = userMapper.list(new HashMap<String, Object>(16));
        for (Esecusrdef user : users) {
            Tree<DeptDO> tree = new Tree<DeptDO>();
            tree.setId(user.getUserId().toString());
            tree.setParentId(user.getDeptId().toString());
            tree.setText(user.getUserDesc()());
            Map<String, Object> state = new HashMap<>(16);
            state.put("opened", true);
            state.put("mType", "user");
            tree.setState(state);
            trees.add(tree);
        }
        // 默认顶级菜单为０，根据数据库实际情况调整
        Tree<DeptDO> t = BuildTree.build(trees);
        return t;
	}


	@Override
	public int updatePersonal(Esecusrdef user) {
		return userMapper.update(userDO);
	}


	@Override
	public Map<String, Object> updatePersonalImg(MultipartFile file, String avatar_data, Long userId) throws Exception {
        String fileName = file.getOriginalFilename();
        fileName = FileUtil.renameToUUID(fileName);
        FileDO sysFile = new FileDO(FileType.fileType(fileName), "/files/" + fileName, new Date());
        //获取图片后缀
        String prefix = fileName.substring((fileName.lastIndexOf(".") + 1));
        String[] str = avatar_data.split(",");
        //获取截取的x坐标
        int x = (int) Math.floor(Double.parseDouble(str[0].split(":")[1]));
        //获取截取的y坐标
        int y = (int) Math.floor(Double.parseDouble(str[1].split(":")[1]));
        //获取截取的高度
        int h = (int) Math.floor(Double.parseDouble(str[2].split(":")[1]));
        //获取截取的宽度
        int w = (int) Math.floor(Double.parseDouble(str[3].split(":")[1]));
        //获取旋转的角度
        int r = Integer.parseInt(str[4].split(":")[1].replaceAll("}", ""));
        try {
            BufferedImage cutImage = ImageUtils.cutImage(file, x, y, w, h, prefix);
            BufferedImage rotateImage = ImageUtils.rotateImage(cutImage, r);
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            boolean flag = ImageIO.write(rotateImage, prefix, out);
            //转换后存入数据库
            byte[] b = out.toByteArray();
            FileUtil.uploadFile(b, bootdoConfig.getUploadPath(), fileName);
        } catch (Exception e) {
            throw new Exception("图片裁剪错误！！");
        }
        Map<String, Object> result = new HashMap<>();
        if (sysFileService.save(sysFile) > 0) {
            UserDO userDO = new UserDO();
            userDO.setUserId(userId);
            userDO.setPicId(sysFile.getId());
            if (userMapper.update(userDO) > 0) {
                result.put("url", sysFile.getUrl());
            }
        }
        return result;
	}

}
