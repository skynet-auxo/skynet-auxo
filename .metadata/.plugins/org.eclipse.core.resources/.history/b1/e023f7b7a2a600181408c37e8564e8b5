/** 
 * Project Name:SkynetEye
 * File Name:UserServiceImpl.java 
 * Package Name:com.skynet.system.service.impl 
 * History
 * Seq   Date        Developer     email                   
 *  ---------------------------------------------------------------------------
 *  1    2018年8月23日    zeroLi       343077359@qq.com
 *
 *
 * Fcuntion Description :
 *
 *  ---------------------------------------------------------------------------
 * Copyright (c) 2018, SkynetEye All Rights Reserved. 
 * 
 */ 
package com.skynet.system.service.impl;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import javax.annotation.Resource;
import javax.imageio.ImageIO;

import org.apache.commons.lang3.ArrayUtils;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.skynet.common.bean.Esysfildef;
import com.skynet.common.bean.Tree;
import com.skynet.common.utils.BuildTree;
import com.skynet.common.utils.FileType;
import com.skynet.common.utils.FileUtil;
import com.skynet.common.utils.ImageUtils;
import com.skynet.common.utils.MD5Utils;
import com.skynet.system.bean.Esecdptdef;
import com.skynet.system.bean.Esecuserol;
import com.skynet.system.bean.Esecusrdef;
import com.skynet.system.bean.subtype.EsecusrdefC;
import com.skynet.system.dao.UserDao;
import com.skynet.system.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Resource
	private UserDao userDao;
	@Override
	public List<Esecusrdef> findAll() {
		
		return userDao.findAll();
	}

	@Override
	public Esecusrdef getUser(Long id) {
//        List<Long> roleIds = userRoleMapper.listRoleId(id);
        Esecusrdef user = userDao.getUser(id);
//        user.setDeptName(deptMapper.get(user.getDeptId()).getName());
//        user.setRoleIds(roleIds);
        return user;
	}

	@Override
	public List<Esecusrdef> userList(Map<String, Object> map) {
		return userDao.userList(map);
	}
	
	@Override
	public int count(Map<String, Object> map) {
        return userDao.count(map);
	}


	@Override
	public int create(Esecusrdef user) {
        int count = userDao.create(user);
        Long userId = user.getUserId();
        List<Long> roles = user.getRoleIds();
//        userRoleMapper.deleteByUserId(userId);
        List<Esecuserol> list = new ArrayList<>();
        for (Long roleId : roles) {
        	Esecuserol esecuserol = new Esecuserol();
        	esecuserol.setUserId(userId);
        	esecuserol.setRoleId(roleId);
            list.add(esecuserol);
        }
        if (list.size() > 0) {
//            userRoleMapper.batchCreate(list);
        }
        return count;
	}


	@Override
	public int update(Esecusrdef user) {
        int r = userDao.update(user);
        Long userId = user.getUserId();
        List<Long> roles = user.getRoleIds();
//        userRoleMapper.deleteByUserId(userId);
        List<Esecuserol> list = new ArrayList<>();
        for (Long roleId : roles) {
        	Esecuserol esecuserol = new Esecuserol();
        	esecuserol.setUserId(userId);
        	esecuserol.setRoleId(roleId);
            list.add(esecuserol);
        }
        if (list.size() > 0) {
//            userRoleMapper.batchCreate(list);
        }
        return r;
	}


	@Override
	public int delete(Long userId) {
//        userRoleMapper.deleteByUserId(userId);
        return userDao.delete(userId);
	}


	@Override
	public int batchDelete(Long[] userIds) {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public boolean exit(Map<String, Object> params) {
        boolean exit;
        exit = userDao.userList(params).size() > 0;
        return exit;
	}


	@Override
	public Set<String> listRoles(Long userId) {
		// TODO Auto-generated method stub
		return null;
	}


//	@Override
//	public int resetPwd(EsecusrdefC userC, Esecusrdef user) throws Exception {
//        if (Objects.equals(userC.getEsecusrdef().getUserId(), user.getUserId())) {
//            if (Objects.equals(MD5Utils.encrypt(user.getUserName(), userC.getPwdOld()), user.getPassWord())) {
//            	user.setPassWord(MD5Utils.encrypt(user.getUserName(), userC.getPwdNew()));
//                return userDao.update(user);
//            } else {
//                throw new Exception("Input the password is wrong");
//            }
//        } else {
//            throw new Exception("You only can modify the account you login");
//        }
//	}


	@Override
	public int adminResetPwd(EsecusrdefC userC) throws Exception {
		Esecusrdef esecusrdef = getUser(userC.getEsecusrdef().getUserId());
        if ("admin".equals(esecusrdef.getUserName())) {
            throw new Exception("Super administrator account does not allow direct reset!");
        }
        esecusrdef.setPassWord(MD5Utils.encrypt(esecusrdef.getUserName(), userC.getPwdNew()));
        return userDao.update(esecusrdef);
	}


//	@Override
//	public Tree<Esecdptdef> getTree() {
//        List<Tree<Esecdptdef>> trees = new ArrayList<Tree<Esecdptdef>>();
//        List<Esecdptdef> depts = deptMapper.list(new HashMap<String, Object>(16));
//        Long[] pDepts = deptMapper.listParentDept();
//        Long[] uDepts = userDao.listAllDept();
//        Long[] allDepts = (Long[]) ArrayUtils.addAll(pDepts, uDepts);
//        for (Esecdptdef dept : depts) {
//            if (!ArrayUtils.contains(allDepts, dept.getDeptId())) {
//                continue;
//            }
//            Tree<Esecdptdef> tree = new Tree<Esecdptdef>();
//            tree.setId(dept.getDeptId().toString());
//            tree.setParentId(dept.getParentId().toString());
//            tree.setText(dept.getName());
//            Map<String, Object> state = new HashMap<>(16);
//            state.put("opened", true);
//            state.put("mType", "dept");
//            tree.setState(state);
//            trees.add(tree);
//        }
//        List<Esecusrdef> users = userMapper.list(new HashMap<String, Object>(16));
//        for (Esecusrdef user : users) {
//            Tree<Esecdptdef> tree = new Tree<Esecdptdef>();
//            tree.setId(user.getUserId().toString());
//            tree.setParentId(user.getDeptId().toString());
//            tree.setText(user.getUserDesc());
//            Map<String, Object> state = new HashMap<>(16);
//            state.put("opened", true);
//            state.put("mType", "user");
//            tree.setState(state);
//            trees.add(tree);
//        }
//        // 默认顶级菜单为０，根据数据库实际情况调整
//        Tree<Esecdptdef> t = BuildTree.build(trees);
//        return t;
//	}


	@Override
	public int updatePersonal(Esecusrdef user) {
		return userDao.update(user);
	}


	@Override
	public Map<String, Object> updatePersonalImg(MultipartFile file, String avatar_data, Long userId) throws Exception {
//        String fileName = file.getOriginalFilename();
//        fileName = FileUtil.renameToUUID(fileName);
//        Esysfildef sysFile = new Esysfildef(FileType.fileType(fileName), "/files/" + fileName, userId, new Date(), userId, new Date());
//        //获取图片后缀
//        String prefix = fileName.substring((fileName.lastIndexOf(".") + 1));
//        String[] str = avatar_data.split(",");
//        //获取截取的x坐标
//        int x = (int) Math.floor(Double.parseDouble(str[0].split(":")[1]));
//        //获取截取的y坐标
//        int y = (int) Math.floor(Double.parseDouble(str[1].split(":")[1]));
//        //获取截取的高度
//        int h = (int) Math.floor(Double.parseDouble(str[2].split(":")[1]));
//        //获取截取的宽度
//        int w = (int) Math.floor(Double.parseDouble(str[3].split(":")[1]));
//        //获取旋转的角度
//        int r = Integer.parseInt(str[4].split(":")[1].replaceAll("}", ""));
//        try {
//            BufferedImage cutImage = ImageUtils.cutImage(file, x, y, w, h, prefix);
//            BufferedImage rotateImage = ImageUtils.rotateImage(cutImage, r);
//            ByteArrayOutputStream out = new ByteArrayOutputStream();
//            ImageIO.write(rotateImage, prefix, out);
//            //Insert to database after switch it
//            byte[] b = out.toByteArray();
//            FileUtil.uploadFile(b, skynetConfig.getUploadPath(), fileName);
//        } catch (Exception e) {
//            throw new Exception("Cut image error!");
//        }
//        Map<String, Object> result = new HashMap<>();
//        if (sysFileService.create(sysFile) > 0) {
//        	Esecusrdef esecusrdef = new Esecusrdef();
//        	esecusrdef.setUserId(userId);
//        	esecusrdef.setPicId(sysFile.getId());
//            if (userDao.update(esecusrdef) > 0) {
//                result.put("url", sysFile.getUrl());
//            }
//        }
//        return result;
		
		return null;
	}

}
