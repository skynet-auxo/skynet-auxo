/** 
 * Project Name:SkynetEye
 * File ShiroRealm 
 * Package Name:com.skynet.system.shiro 
 * History
 * Seq   Date        Developer     email                   
 *  ---------------------------------------------------------------------------
 *  1    2018年8月22日    zeroLi       343077359@qq.com
 *
 *
 * Fcuntion Description :shiro配置类
 * 
 * 登录认证 一般情况下 , 登录成功之后就给当前用户进行权限赋予了
 * 根据用户的权限信息做授权判断，这一步是以doGetAuthenticationInfo为基础的，只有在有用户信息后才能根据用户的角色和授权信息做判断是否给用户授权，
 * 因此这里的Roles和Permissions是用户的两个重点判断依据 
 * 
 * https://www.cnblogs.com/ll409546297/p/7815409.html
 * 1. Authentication：身份认证/登录，验证用户是不是拥有相应的身份；
 * 2. Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；
 * 3. Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；
 * 4. Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；
 * 5. Web Support：Web支持，可以非常容易的集成到Web环境；
 * 6. Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；
 * 7. Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；
 * 8. Testing：提供测试支持；
 * 9. Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；
 * 10. Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。
 * 
 *   记住一点，Shiro不会去维护用户、维护权限；这些需要我们自己去设计/提供；然后通过相应的接口注入给Shiro即可。
 *  ---------------------------------------------------------------------------
 * Copyright (c) 2018, SkynetEye All Rights Reserved. 
 * 
 */
package com.skynet.system.shiro;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

import com.skynet.system.bean.Esecuserol;
import com.skynet.system.bean.Esecusrdef;
import com.skynet.system.dao.UserDao;
import com.skynet.system.service.MenuService;

@Configuration
public class ShiroRealm extends AuthorizingRealm {

	@Autowired
	private UserDao userDao;
	@Autowired
	private MenuService menuService;

	/**
	 *  获取用户的权限信息，这是为下一步的授权做判断，获取当前用户的角色和这些角色所拥有的权限信息
	 */
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
		Subject subject = SecurityUtils.getSubject();
		Object obj = subject.getPrincipal();
		Session session = subject.getSession();
//		Esecuserol aa = (Esecuserol) obj;
//		Long uid = aa.getUserId();
//		
		Long userId = ((Esecuserol) SecurityUtils.getSubject().getPrincipal()).getUserId();
		
		
		Set<String> perms = menuService.listPerms(userId);
		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
		info.setStringPermissions(perms);
		return info;
	}

	/**
	 * 登录认证 一般情况下 ,
	 * 登录成功之后就给当前用户进行权限赋予了，根据用户的权限信息做授权判断，这一步是以doGetAuthenticationInfo为基础的，
	 * 只有在有用户信息后才能根据用户的角色和授权信息做判断是否给用户授权，因此这里的Roles和Permissions是用户的两个重点判断依据
	 */
	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken)
			throws AuthenticationException {
		UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;
		String username = (String) token.getPrincipal();
		// 查出是否有此用户
//		Esecusrdef user = userMapper.findByName(token.getUsername());

		Map<String, Object> map = new HashMap<>(16);
		map.put("userName", username);
		String password = new String((char[]) token.getCredentials());
		Esecusrdef user = userDao.userList(map).get(0);
		// 账号不存在
		if (user == null) {
			throw new UnknownAccountException("账号或密码不正确");
		}
		// 密码错误
		if (!password.equals(user.getPassWord())) {
			throw new IncorrectCredentialsException("账号或密码不正确");
		}
		// 账号锁定
		if (user.getStatus() == 0) {
			throw new LockedAccountException("账号已被锁定,请联系管理员");
		}
		SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user, password, getName());
//		Session session = SecurityUtils.getSubject().getSession();
		//成功则放入session
//		session.setAttribute("user", user);
		
		return info;

//	    if(user != null){ 
//	        // 若存在，将此用户存放到登录认证info中，无需自己做密码对比，Shiro会为我们进行密码对比校验 
//	        List<Esecuserol> rlist = uRoleDao.findRoleByUid(user.getUserId());//获取用户角色 
//	        List<UPermission> plist = uPermissionDao.findPermissionByUid(user.getUserId());//获取用户权限 
//	        List<String> roleStrlist=new ArrayList<String>();////用户的角色集合 
//	        List<String> perminsStrlist=new ArrayList<String>();//用户的权限集合 
//	        for (Esecuserol role : rlist) { 
//	          roleStrlist.add(role.getName()); 
//	        } 
//	        for (UPermission uPermission : plist) { 
//	          perminsStrlist.add(uPermission.getName()); 
//	        } 
//	        user.setRoleStrlist(roleStrlist); 
//	        user.setPerminsStrlist(perminsStrlist); 
//	        Session session = SecurityUtils.getSubject().getSession(); 
//	        session.setAttribute("user", user);//成功则放入session 
//	        // 若存在，将此用户存放到登录认证info中，无需自己做密码对比，Shiro会为我们进行密码对比校验 
//	        return new SimpleAuthenticationInfo(user, user.getPassword(), getName()); 
//	      } 
//	      return null;
	}

}
