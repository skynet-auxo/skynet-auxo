/** 
 * Project Name:SkynetEye
 * File Name:UserServiceImpl.java 
 * Package Name:com.skynet.system.service.imp 
 * History
 * Seq   Date        Developer      Description                        
 *  ---------------------------------------------------------------------------
 *  1    2018年8月20日    zeroLi        Create
 *
 *  ---------------------------------------------------------------------------
 * Copyright (c) 2018, SkynetEye All Rights Reserved. 
 * 
 */ 
package com.skynet.system.service.imp;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.skynet.common.bean.Tree;
import com.skynet.system.bean.Esecusrdef;
import com.skynet.system.service.UserService;

//@CacheConfig(cacheNames = "user")
@Transactional
@Service
public class UserServiceImpl implements UserService {
	
    @Autowired
    private UserDao userMapper;
    @Autowired
    private UserRoleDao userRoleMapper;
    @Autowired
    private DeptDao deptMapper;
    @Autowired
    private FileService sysFileService;
    @Autowired
    private BootdoConfig bootdoConfig;
    
    private static final Logger logger = LoggerFactory.getLogger(UserService.class);

	@Override
	public Esecusrdef get(Long id) {
        List<Long> roleIds = userRoleMapper.listRoleId(id);
        UserDO user = userMapper.get(id);
        user.setDeptName(deptMapper.get(user.getDeptId()).getName());
        user.setRoleIds(roleIds);
        return user;
	}

	@Override
	public List<Esecusrdef> list(Map<String, Object> map) {
        return userMapper.list(map);
	}

	@Override
	public int count(Map<String, Object> map) {
        return userMapper.count(map);
	}


	@Override
	public int create(Esecusrdef user) {
        int count = userMapper.save(user);
        Long userId = user.getUserId();
        List<Long> roles = user.getRoleIds();
        userRoleMapper.removeByUserId(userId);
        List<UserRoleDO> list = new ArrayList<>();
        for (Long roleId : roles) {
            UserRoleDO ur = new UserRoleDO();
            ur.setUserId(userId);
            ur.setRoleId(roleId);
            list.add(ur);
        }
        if (list.size() > 0) {
            userRoleMapper.batchSave(list);
        }
        return count;
	}


	@Override
	public int update(Esecusrdef user) {
        int r = userMapper.update(user);
        Long userId = user.getUserId();
        List<Long> roles = user.getRoleIds();
        userRoleMapper.removeByUserId(userId);
        List<UserRoleDO> list = new ArrayList<>();
        for (Long roleId : roles) {
            UserRoleDO ur = new UserRoleDO();
            ur.setUserId(userId);
            ur.setRoleId(roleId);
            list.add(ur);
        }
        if (list.size() > 0) {
            userRoleMapper.batchSave(list);
        }
        return r;
	}


	@Override
	public int delete(Long userId) {
        userRoleMapper.removeByUserId(userId);
        return userMapper.delete(userId);
	}


	@Override
	public int batchDelete(Long[] userIds) {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public boolean exit(Map<String, Object> params) {
        boolean exit;
        exit = userMapper.list(params).size() > 0;
        return exit;
	}


	@Override
	public Set<String> listRoles(Long userId) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public int resetPwd(Esecusrdef userO, Esecusrdef userD) throws Exception {
        if (Objects.equals(userVO.getUserDO().getUserId(), userDO.getUserId())) {
            if (Objects.equals(MD5Utils.encrypt(userDO.getUsername(), userVO.getPwdOld()), userDO.getPassword())) {
                userDO.setPassword(MD5Utils.encrypt(userDO.getUsername(), userVO.getPwdNew()));
                return userMapper.update(userDO);
            } else {
                throw new Exception("Input the password is wrong");
            }
        } else {
            throw new Exception("You only can modify the account you login");
        }
	}


	@Override
	public int adminResetPwd(Esecusrdef user) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public Tree<Esecusrdef> getTree() {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public int updatePersonal(Esecusrdef user) {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public Map<String, Object> updatePersonalImg(MultipartFile file, String avatar_data, Long userId) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

}
