/** 
 * Project Name:SkynetEye
 * File Name:RoleServiceImpl.java 
 * Package Name:com.skynet.system.service.impl 
 * History
 * Seq   Date        Developer     email                   
 *  ---------------------------------------------------------------------------
 *  1    2018年8月24日    zeroLi       343077359@qq.com
 *
 *
 * Fcuntion Description :
 *
 *  ---------------------------------------------------------------------------
 * Copyright (c) 2018, SkynetEye All Rights Reserved. 
 * 
 */ 
package com.skynet.system.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.skynet.system.bean.Esecroldef;
import com.skynet.system.dao.RoleDao;
import com.skynet.system.dao.RoleMenuDao;
import com.skynet.system.dao.UserDao;
import com.skynet.system.dao.UserRoleDao;
import com.skynet.system.service.RoleService;

/**
 * @author Administrator
 *
 */
public class RoleServiceImpl implements RoleService {

    public static final String ROLE_ALL_KEY = "\"role_all\"";

    public static final String DEMO_CACHE_NAME = "role";

    @Autowired
    RoleDao roleMapper;
    @Autowired
    RoleMenuDao roleMenuMapper;
    @Autowired
    UserDao userMapper;
    @Autowired
    UserRoleDao userRoleMapper;
    
	@Override
	public Esecroldef get(Long id) {
		Esecroldef roleDO = roleMapper.get(id);
        return roleDO;
	}

	@Override
	public List<Esecroldef> list() {
        List<Esecroldef> roles = roleMapper.list(new HashMap<>(16));
        return roles;
	}

	@Transactional
	@Override
	public int create(Esecroldef role) {
        int count = roleMapper.save(role);
        List<Long> menuIds = role.getMenuIds();
        Long roleId = role.getRoleId();
        List<RoleMenuDO> rms = new ArrayList<>();
        for (Long menuId : menuIds) {
            RoleMenuDO rmDo = new RoleMenuDO();
            rmDo.setRoleId(roleId);
            rmDo.setMenuId(menuId);
            rms.add(rmDo);
        }
        roleMenuMapper.removeByRoleId(roleId);
        if (rms.size() > 0) {
            roleMenuMapper.batchSave(rms);
        }
        return count;
	}

	@Transactional
	@Override
	public int update(Esecroldef role) {
        int r = roleMapper.update(role);
        List<Long> menuIds = role.getMenuIds();
        Long roleId = role.getRoleId();
        roleMenuMapper.removeByRoleId(roleId);
        List<RoleMenuDO> rms = new ArrayList<>();
        for (Long menuId : menuIds) {
            RoleMenuDO rmDo = new RoleMenuDO();
            rmDo.setRoleId(roleId);
            rmDo.setMenuId(menuId);
            rms.add(rmDo);
        }
        if (rms.size() > 0) {
            roleMenuMapper.batchSave(rms);
        }
        return r;
	}

	@Transactional
	@Override
	public int delete(Long id) {
        int count = roleMapper.remove(id);
        userRoleMapper.removeByRoleId(id);
        roleMenuMapper.removeByRoleId(id);
        return count;
	}

	@Override
	public List<Esecroldef> list(Long userId) {
        List<Long> rolesIds = userRoleMapper.listRoleId(userId);
        List<Esecroldef> roles = roleMapper.list(new HashMap<>(16));
        for (Esecroldef roleDO : roles) {
            roleDO.setRoleSign("false");
            for (Long roleId : rolesIds) {
                if (Objects.equals(roleDO.getRoleId(), roleId)) {
                    roleDO.setRoleSign("true");
                    break;
                }
            }
        }
        return roles;
	}

	@Transactional
	@Override
	public int batchDelete(Long[] ids) {
        int r = roleMapper.batchRemove(ids);
        return r;
	}

}
